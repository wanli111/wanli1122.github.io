{"meta":{"title":"小万里工作室","subtitle":"","description":"欢迎来到小万里工作室","author":"万里","url":"http://example.com","root":"/"},"pages":[{"title":"404","text":"","path":"404/index.html","date":"12-20","excerpt":""},{"title":"search","text":"","path":"search/index.html","date":"12-20","excerpt":""},{"title":"about","text":"","path":"about/index.html","date":"12-20","excerpt":""},{"title":"tags","text":"","path":"tags/index.html","date":"12-20","excerpt":""},{"title":"categories","text":"","path":"categories/index.html","date":"12-20","excerpt":""},{"title":"categories","text":"","path":"categories/index-1.html","date":"12-20","excerpt":""}],"posts":[{"title":"我的第一次博客","text":"this is test page","path":"2023/12/20/我的第一次博客/","date":"12-20","excerpt":"","tags":[{"name":"test","slug":"test","permalink":"http://example.com/tags/test/"}]},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","path":"2023/12/20/hello-world/","date":"12-20","excerpt":"","tags":[]},{"title":"磁盘阵列","text":"磁盘阵列类型RAID0将数据分散写到两块盘里面 优点：读写速度快，缺点：故障率高 RAID1一份主盘一份备份盘 进行备份冗余，保障数据的安全，但不会对读写速度起到作用 RAID5奇偶校验盘 一份盘数据坏掉了，其他的盘可以通过奇偶校验信息去修复里面的损坏数据 缺点：写性能差每次写数据都要去读其他盘的奇偶校验信息，但读性能还可以 RAID10先做RAID1 再做RAID0 部署磁盘阵列 1234mdadm -Cv /dev/md0 -a yes -n 4 -l 10 /dev/sdb /dev/sdc /dev/sdd /dev/sdemkfs.ext4 /dev/md0mkdir /RAIDmount /dev/md0 /RAID","path":"2023/10/23/07磁盘阵列/","date":"10-23","excerpt":"","tags":[{"name":"linux基础知识","slug":"linux基础知识","permalink":"http://example.com/tags/linux%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"}]},{"title":"软件包管理","text":"软件包管理软件类型 源码包 需要进行编译 二进制包(已经编译好了) redhat&#x2F;centos 工具 rpm yum ubuntu 工具 dpkg apt yum官方源命令123456789101112yum repolist #查看所有源源标识 源名称 状态base/7/x86_64 CentOS-7 - Base - mirrors.ali 10,072extras/7/x86_64 CentOS-7 - Extras - mirrors.a 512updates/7/x86_64 CentOS-7 - Updates - mirrors. 4,050repolist: 14,634# 更换腾讯源mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup #备份wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.cloud.tencent.com/repo/centos7_base.repo #下载腾讯源curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.cloud.tencent.com/repo/centos7_base.repo #没有wget可以用curlyum clean all #清除缓存yum makecache #建立缓存 源腾讯源 CentOS (tencent.com) 阿里源 centos镜像_centos下载地址_centos安装教程-阿里巴巴开源镜像站 (aliyun.com) 清华源 扩展源12yum install -y epel-releaseyum remove -y #删除 图形化桌面1234#查看group安装环境yum grouplistyum groupinstall &quot;GNOME桌面&quot;startx #启动 yum自建源RPM管理123456rpm -ivh package_file.rpm -i install #安装 -h #包档如果没有破解，则打印50个破折号 -v #打印调试信息rpm -e package_file.rpm #卸载rpm -qc rsyslog #查看软件包的配置文件 查询1234567891011121314rpm -q [query-options]-a, --all 查询所有安装包-f, --file 查询安装包及其相关文件--whatprovides : 查询指定包由哪一个包所提供--whatrequires : 查询指定包由哪个包所依赖--changelog ： 查询rpm包的changelog-c ： 查询软件包的配置文件-d ： 查询软件包的文档-i ： 查询软件包的信息-l ： 查看指定软件包安装后生成的所有文件--scripts： 查询程序包自带的脚本片段-R ： 查询指定的程序包所依赖的--provides： 列出指定程序包所提供的#一般rpm -qc 用的多一些 用于查询软件包的配置文件","path":"2023/10/22/08软件包管理/","date":"10-22","excerpt":"","tags":[{"name":"linux基础知识","slug":"linux基础知识","permalink":"http://example.com/tags/linux%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"}]},{"title":"LVM逻辑卷管理系统","text":"LVM逻辑卷管理系统为什么要引入逻辑卷管理系统 解决硬盘在创建分区后不易修改大小的缺陷 具体来说，逻辑卷管理提供了以下几方面的优势： 灵活性：逻辑卷的大小可以动态调整，而且不会丢失现有数据。新加入的硬盘也可以被抽象封装，不会改变现有上层的逻辑卷，这样就可以轻松地管理磁盘空间。 容错性：如果磁盘开始出现错误，可以通过卷组将替换磁盘注册为物理卷，并且逻辑卷的范围可迁移到新磁盘，这样就可以提高系统的容错能力。 优化存储空间：逻辑卷可以由多个物理卷组成，这样就可以将数据分散到不同的物理硬盘上，从而提高存储空间的利用率和读写性能。 方便的扩展：逻辑卷可以方便地扩展到多个物理硬盘上，这样就可以方便地增加存储空间。 总之，引入逻辑卷管理可以大大提高磁盘管理的灵活性、容错性、优化存储空间和方便的扩展性。 部署 添加两块盘 sdb sdc 1234567891011121314151617181920212223242526272829#创建物理卷pvcreate /dev/sdb /dev/sdc Physical volume &quot;/dev/sdb&quot; successfully created. Physical volume &quot;/dev/sdc&quot; successfully created.#创建卷组vgcraete storage /dev/sdb /devsdc Volume group &quot;storage&quot; successfully created[root@localhost ~]# vgdisplay #查看卷组#创建逻辑卷lvcreate -n vo -L 512M storage Logical volume &quot;vo&quot; created.#格式化mkfs.ext4 /dev/storage/vo#挂载mount /dev/storage/vo /mnt/data#查看挂载情况[root@localhost ~]# df -hFilesystem Size Used Avail Use% Mounted on/dev/mapper/centos-root 17G 1003M 17G 6% /devtmpfs 898M 0 898M 0% /devtmpfs 910M 0 910M 0% /dev/shmtmpfs 910M 9.5M 901M 2% /runtmpfs 910M 0 910M 0% /sys/fs/cgroup/dev/sda1 1014M 146M 869M 15% /boottmpfs 182M 0 182M 0% /run/user/0/dev/mapper/storage-vo 140M 1.6M 128M 2% /vo 扩容123456#取消挂载umount /mnt/datalvextend -L 888M /dev/storage/vo#生效文件resizefs /dev/storage/vodf -h #查看 缩容12345#取消挂载resize2fs /dev/storage/volvreduce /dev/storage/vo -L 200Mdf -h#重新挂载 删除123lvremove /dev/storage/vovgremove storagepvremove /dev/sdb /dev/sdc","path":"2023/10/21/06 LVM逻辑卷管理/","date":"10-21","excerpt":"","tags":[{"name":"linux基础知识","slug":"linux基础知识","permalink":"http://example.com/tags/linux%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"}]},{"title":"linux基础","text":"linuxLinux系统内核指的是一个由Linus Torvalds负责维护，提供硬件抽象层、硬盘及文件系统控制及多 任务功能的系统核心程序。 Linux发行套件系统是我们常说的Linux操作系统，也即是由Linux内核与各种常用软件的集合产品 操作系统 组成：内核+子系统 分类 linux linux一般是用于企业服务器，是一款免费开源的软件，性能比较稳定 基于linux系统开发了很多的系统比如redhat，腾讯的Tlinux，ubuntu，centos，alpha等 windows 闭源操作系统，用于日常办公游戏 mac 闭源 苹果公司开发的操作系统 unix 一般用于硬件 子系统 进程 内存RAM 物理内存 DDR内存条 虚拟内存 硬盘模拟 swap交换空间 文件 网络 设备（usb块设备） linux远程连接工具 xshell putty mobaxterm (一般用这个比较好用) 红帽redhat认证redhat是目前全球最大的Linux商业公司，redhat为Linux技术工程师提供了一个考试认证，通过这个考 试认证的工程师，可以获得redhat公司颁发的证书。 在行业内，redhat的技术证书还是占有很高的含金量的，证书的认证难度依次如下 linux图谱linux分支： https://user-images.githubusercontent.com/19638095/97118180-e25f3680-1708-11eb-8bef-1ebe025e1374.png linux发展到现在产生了很多不同的分支，可以扫二维码进行查看","path":"2023/10/20/01linux基础/","date":"10-20","excerpt":"","tags":[{"name":"linux基础知识","slug":"linux基础知识","permalink":"http://example.com/tags/linux%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"}]},{"title":"进程管理","text":"进程管理进程类型 守护进程：开机自启，跟终端无关 前台进程：可以用ctrl+d打断 生命周期systemd父进程fork出子进程的一个过程,进程id(pid) 是唯一的 systemd简介123#存在于“用户空间” 应用程序#是一个pid为1的“大管家”#是所有进程的父进程 基础用法12345678910111213141516171819systemctl start httpdsystemctl stop httpd systemlctl enable httpd #开机自启systemlctl disable httpd #关闭开机自启systemlctl status httpd #查看进程状态[root@localhost ~]# yum install -y httpd[root@localhost ~]# systemctl start httpd[root@localhost ~]# systemctl enable httpd[root@localhost ~]# systemctl status httpd● httpd.service - The Apache HTTP Server Loaded: loaded (/usr/lib/systemd/system/httpd.service; disabled; vendor preset: disabled) Active: active (running) since 一 2023-12-11 16:18:58 CST; 2h 27min ago[root@localhost ~]# systemctl stop httpd[root@localhost ~]# systemctl status httpd● httpd.service - The Apache HTTP Server Loaded: loaded (/usr/lib/systemd/system/httpd.service; disabled; vendor preset: disabled) Active: inactive (dead) Docs: man:httpd(8) man:apachectl(8) ps是一种静态的查看进程状态的进程 123456789[root@localhost ~]# systemctl start httpd[root@localhost ~]# ps aux |grep httpdroot 6508 1.0 0.2 224088 5068 ? Ss 18:48 0:00 /usr/sbin/httpd -DFOREGROUNDapache 6509 0.0 0.1 226172 3100 ? S 18:48 0:00 /usr/sbin/httpd -DFOREGROUNDapache 6510 0.0 0.1 226172 3100 ? S 18:48 0:00 /usr/sbin/httpd -DFOREGROUNDapache 6511 0.0 0.1 226172 3100 ? S 18:48 0:00 /usr/sbin/httpd -DFOREGROUNDapache 6512 0.0 0.1 226172 3100 ? S 18:48 0:00 /usr/sbin/httpd -DFOREGROUNDapache 6513 0.0 0.1 226172 3100 ? S 18:48 0:00 /usr/sbin/httpd -DFOREGROUNDroot 6515 0.0 0.0 112824 988 pts/2 S+ 18:48 0:00 grep --color=auto httpd 进程状态 R 执行中 S 可中断状态 T 暂停 Z 僵尸状态 虽然已经结束，但是资源还没有完全释放，等待父进程调用释放掉资源 s 有子进程 +前台进程 自定义显示格式显示的格式详细 1[root@localhost ~]# ps -axo user,pid,ppid,%mem,%cpu,command --sort -%cpu top动态显示进程状态 交互模式快捷键 kill关闭进程 kill 12345678910111213141516171819信号:kill -l 列出所有信号kill -9 强制杀死kill pid 正常结束kill -1 / kill -HUP 重新加载[root@localhost ~]# kill -l 1) SIGHUP 2) SIGINT 3) SIGQUIT 4) SIGILL 5) SIGTRAP 6) SIGABRT 7) SIGBUS 8) SIGFPE 9) SIGKILL 10) SIGUSR111) SIGSEGV 12) SIGUSR2 13) SIGPIPE 14) SIGALRM 15) SIGTERM16) SIGSTKFLT 17) SIGCHLD 18) SIGCONT 19) SIGSTOP 20) SIGTSTP21) SIGTTIN 22) SIGTTOU 23) SIGURG 24) SIGXCPU 25) SIGXFSZ26) SIGVTALRM 27) SIGPROF 28) SIGWINCH 29) SIGIO 30) SIGPWR31) SIGSYS 34) SIGRTMIN 35) SIGRTMIN+1 36) SIGRTMIN+2 37) SIGRTMIN+338) SIGRTMIN+4 39) SIGRTMIN+5 40) SIGRTMIN+6 41) SIGRTMIN+7 42) SIGRTMIN+843) SIGRTMIN+9 44) SIGRTMIN+10 45) SIGRTMIN+11 46) SIGRTMIN+12 47) SIGRTMIN+1348) SIGRTMIN+14 49) SIGRTMIN+15 50) SIGRTMAX-14 51) SIGRTMAX-13 52) SIGRTMAX-1253) SIGRTMAX-11 54) SIGRTMAX-10 55) SIGRTMAX-9 56) SIGRTMAX-8 57) SIGRTMAX-758) SIGRTMAX-6 59) SIGRTMAX-5 60) SIGRTMAX-4 61) SIGRTMAX-3 62) SIGRTMAX-263) SIGRTMAX-1 64) SIGRTMAX pkill 普通的kill后面要加进程pid才能杀死进程 pkill直接接进程名就可以 会杀死指定名字的所有进程 12ping www.baidu.compkill ping 优先级nice nice值越小优先级越高 -2019 高低 jobs查看后台进程 一个进程怎么放到后台运行： nohup ping www.baidu.com 跟终端无关 不随终端关闭而关闭但是jobs查看不了，只能kill杀死 bg ping www.baidu.com &amp; ctrl+Z 后台暂停 放前台fg 前台就是在终端运行显示出来的进程","path":"2023/10/20/04进程管理/","date":"10-20","excerpt":"","tags":[{"name":"linux基础知识","slug":"linux基础知识","permalink":"http://example.com/tags/linux%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"}]},{"title":"存储管理","text":"存储管理硬盘 固态硬盘 SSD 机械硬盘 HDD 分区表先看个视频在往下看 https://www.bilibili.com/video/BV1kx411Q7Gw?spm_id_from=333.337.search-card.all.click&amp;vd_so MBR格式工具fdisk 最多四个主分区，最大上限2T 可以把一个主分区变成扩展分区，扩展分区里面可以划分无数个逻辑分区 GPT格式没有限制 工具 gdisk linux常见目录名称 操作分区一般硬盘都是以/dev/sd开头的 主分区从1~4 扩展分区从5开始 fdisk1234567891011[root@localhost ~]# lsblkNAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINTsda 8:0 0 50G 0 disk├─sda1 8:1 0 1G 0 part /boot└─sda2 8:2 0 49G 0 part├─centos-root 253:0 0 47G 0 lvm /└─centos-swap 253:1 0 2G 0 lvm [SWAP]sdb 8:16 0 20G 0 disksdc 8:32 0 20G 0 disksr0 11:0 1 1024M 0 romfdisk /dev/sdb 针对MBR格式的分区表 parted实时生效的 gdisk针对GPT格式的分区表 格式化1mkfs.ext4 /dev/sdb 挂载12345678910111213[root@localhost ~]# mkdir -p /mnt/data[root@localhost ~]# mount /dev/sdb1 /mnt/data[root@localhost ~]# df -h文件系统 容量 已用 可用 已用% 挂载点/dev/mapper/centos-root 47G 995M 46G 3% /devtmpfs 979M 0 979M 0% /devtmpfs 991M 0 991M 0% /dev/shmtmpfs 991M 8.5M 982M 1% /runtmpfs 991M 0 991M 0% /sys/fs/cgroup/dev/sda1 1014M 133M 882M 14% /boottmpfs 199M 0 199M 0% /run/user/0/dev/sdb1 9.1G 37M 8.6G 1% /mnt/volume1 自动挂载123vim /etc/fstab/dev/sdb1 /mnt/data ext4 defaults 0 0mount -a #生效文件 虚拟内存虚拟内存是硬盘模拟出来的一个swap交换空间 如何创建swap交换空间 1234567[root@localhost ~]# mkswap /dev/sdb2mkswap: /dev/sdb2: warning: wiping old ext4 signature.Setting up swapspace version 1, size = 5241852 KiBno label, UUID=6707cde0-c7df-4557-b99b-45fbf5b36dcd[root@localhost ~]# swapon /dev/sdb #激活#后面可以执行自动挂载 编辑配置文件free -h #查看内存情况 链接软链接相当于windows底下的快捷方式如果文件本体被删除了，这个链接文件就访问不了了 1234567[root@localhost ~]# ln -s test1 test[root@localhost ~]# ll test1 testlrwxrwxrwx. 1 root root 5 12月 11 19:06 test -&gt; test1-rw-r--r--. 1 root root 0 12月 11 18:40 test1[root@localhost ~]# rm -rf test1[root@localhost ~]# ll testlrwxrwxrwx. 1 root root 5 12月 11 19:06 test -&gt; test1 硬链接相当于文件拷贝了一份 创建文件 文件inode为1 没创建一次硬链接 inode+1 删除一次文件inode-1 当inode减到0 文件就无法访问了4 12345[root@localhost ~]# ln test1 test01[root@localhost ~]# ll test1 test01-rw-r--r--. 3 root root 0 12月 11 19:07 test01-rw-r--r--. 3 root root 0 12月 11 19:07 test1","path":"2023/10/20/05存储管理/","date":"10-20","excerpt":"","tags":[{"name":"linux基础知识","slug":"linux基础知识","permalink":"http://example.com/tags/linux%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"}]},{"title":"数据通信基础","text":"数据通信基础OSI七层模型 由iso组织指定 口诀：物联网叔会使用 物理层 进行比特流的传输 数据链路层 存放mac地址 网络层 存放ip地址 进行路由寻址 传输层 建立主机端到端的连接，存放端口号 1-65536个端口 tcp&#x2F;udp协议也在这一层 会话层 建立维护管理会话 表示层 处理数据格式数据加密 应用层 提供应用程序间数据通信 私有ip地址 私有ip可以重复，但是只能在内网中使用，我们一般上网是通过路由器，就是默认网关，他会从运营商那里分配到一个公网ip，路由器帮我们访问外网然后把资源返回给我们 子网掩码划分主机位和网络位 和ip地址一起使用，用于描述一个ip地址的网络部分和主机部分 ip地址的分类 A类 1.0.0.0~127.255.255.255&#x2F;8 B类 128.0.0.0~191.255.255.255&#x2F;16 C类 192.0.0.0~223.255.255.255&#x2F;24 D类 组播 没有网络概念 E类 其他 用不到 TCP&#x2F;UDPTCP传输控制协议 面向连接的 可靠的携带端口号 端口号1~65535 UDP数据报文协议 数据封装 应用层拿数据到传输层封装一个端口号，然后到网络层封装ip地址，到数据链路层封装mac地址和CRC校验码，最后到物理层进行比特流的传输 ip地址用来标识网络中位置的 比如说你是江苏省xxx市xxx区的地址 mac地址相当于你的身份证 是唯一标识的，全球独一无二的东西 快递员给你东西首先得知道你的ip地址就是你住哪里才能送到你手里，这些都知道了之后，还需要你出示身份证证明送到的是你手里，要你签名这个就是mac地址 如果想要发送数据必须同时拥有mac和ip地址才行 数据报文 ip网络通信类型 单播 广播 组播 TCP三次握手和四次挥手 tcp&#x2F;ip四层模型应用层—-&gt; 传输层——- &gt;网络层 ——-&gt; 网络接口层","path":"2023/10/20/09数据通信基础/","date":"10-20","excerpt":"","tags":[{"name":"linux基础知识","slug":"linux基础知识","permalink":"http://example.com/tags/linux%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"}]},{"title":"linux网络设置","text":"linux网络设置vmware三种网卡配置 vmnet0 桥接模式 单独分配一个物理网卡 vmnet1 仅主机模式 无法上外网 和主机共享ip vmnet8 NAT模式 有一个虚拟的NAT 起到路由网关的作用 ip是192.168.208.2 192.168.208.1是本机在内网的一个ip 配置网络服务nmtui图形化配置 配置完后重启网络 systemctl restart network 配置文件12345678910111213141516171819202122vim /etc/sysconfig/network-scripts/ifcfg-ens33TYPE=EthernetPROXY_METHOD=noneBROWSER_ONLY=noBOOTPROTO=noneDEFROUTE=yesIPV4_FAILURE_FATAL=noIPV6INIT=yesIPV6_AUTOCONF=yesIPV6_DEFROUTE=yesIPV6_FAILURE_FATAL=noIPV6_ADDR_GEN_MODE=stable-privacyNAME=ens33UUID=7cb2fd3e-61dd-4856-87fa-c6db7ec0169bDEVICE=ens33ONBOOT=yesIPADDR=192.168.208.10PREFIX=24GATEWAY=192.168.208.2DNS1=114.114.114.114DNS2=114.114.115.115[root@localhost ~]# systemctl restart network nmcli参考博客： https://www.cnblogs.com/caibao666/p/12321888.html 12345678[root@server1 ~]# nmcli devide status #查看网卡状态设备 类型 状态 连接ens33 ethernet 连接的 ens33lo loopback 未托管 --[root@server1 ~]# nmcli con show #查看连接状态名称 UUID 类型 设备ens33 a1fff70f-e683-48ca-a462-d704a06c5f8b 802-3-ethernet ens33[root@server1 ~]# nmcli con up/down ens33 #开启或关闭网卡 net-tools工具包123yum install -y net-toolsifconfig #查看ipifconfig ens33 up/down #开启或关闭网卡","path":"2023/10/20/11linux网络设置/","date":"10-20","excerpt":"","tags":[{"name":"linux基础知识","slug":"linux基础知识","permalink":"http://example.com/tags/linux%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"}]},{"title":"防火墙与selinux","text":"","path":"2023/10/20/12防火墙与selinux/","date":"10-20","excerpt":"","tags":[{"name":"linux基础知识","slug":"linux基础知识","permalink":"http://example.com/tags/linux%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"}]},{"title":"DHCP DNS NAT","text":"DHCPcisco命令 1.&gt;用户模式 2.# 特权模式 3.R1(conf)# 配置模式 4.R1(conf-if)# 接口配置模式 5.R1(dhcp-if)#dhcp 配置模式 动态主机设置协议 原理：自动分配ip地址 优点： 减少管理员工作量 提升ip地址的利用率 降低ip地址的冲突 dhcp给设备提供的内容：dns服务器，ip，子网掩码，网关，租约时间 实验拓扑 1 DNS域名解析系统DNS是一套域名到ip的映射系统 域名:在网络中要确定一台主机，可以通过ip的方式，但ip的方式不太容易记，所以引入主机名的概念 https://www.baidu.com.(一般最后的点省略) . 根域名 com 一级域名 baidu 域名 https： 表示用的什么协议 域名解析流程：浏览器发送域名解析，先去本地浏览器找缓存，如果找不到去本地hosts文件找对应的ip和域名的映射如果都找不到，浏览器会向本地域名服务器发送请求，找到对应的域名和ip的映射，最后域名服务器返回这个域名对应的ip给浏览器，浏览器访问ip获取资源，如果本地域名服务器也找不到的话会去根域名服务器，全球13台，找到的话会在本地域名服务器和浏览器进行缓存。 当你在浏览器输入www.baidu.com之后会发生什么？ 12345678910111. 浏览器发起域名解析，首先查询浏览器缓存，如果没有，就查询hosts文件，如果没有就提出域名解析请求2. 客户机提出域名解析请求，并将该请求发送给本地的域名服务器。3. 当本地的域名服务器收到请求后,就先查询本地的缓存,如果有该记录项,则本地的域名服务器就直接把查询的结果返回。4. 如果本地的缓存中没有该记录,则本地域名服务器就直接把请求发给根域名服务器,然后根域名服务器再返回给本地域名服务器一个所查询域(根的子域)的主域名服务器的地址。5. 本地服务器再向上一步返回的域名服务器发送请求,然后接受请求的服务器查询自己的缓存,如果没有该纪录,则返回相关的下级的域名服务器的地址。6. 重复第四步,直到找到正确的纪录。7. 本地域名服务器把返回的结果保存到缓存,以备下一次使用,同时还将结果返回给客户机 域名解析记录 12A：记录地址，返回的域名所指向IP地址CNAME：规范名称记录，返回另一个域名，即当前查询的域名是另一个域名的跳转 查看域名解析工具windowsnslookup 12345678910C:\\Users\\万里&gt;nslookup www.baidu.com服务器: UnKnownAddress: 10.60.255.254非权威应答:名称: www.baidu.comAddresses: 240e:e9:6002:15a:0:ff:b05c:1278 240e:e9:6002:15c:0:ff:b015:146f 180.101.50.188 180.101.50.242 linuxdig 123456789101112131415161718[root@localhost ~]# dig www.baidu.com; &lt;&lt;&gt;&gt; DiG 9.11.4-P2-RedHat-9.11.4-26.P2.el7_9.9 &lt;&lt;&gt;&gt; www.baidu.com;; global options: +cmd;; Got answer:;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 25531;; flags: qr rd ra; QUERY: 1, ANSWER: 3, AUTHORITY: 0, ADDITIONAL: 1;; OPT PSEUDOSECTION:; EDNS: version: 0, flags:; udp: 512;; QUESTION SECTION:;www.baidu.com. IN A;; ANSWER SECTION:www.baidu.com. 716 IN CNAME www.a.shifen.com.www.a.shifen.com. 238 IN A 112.80.248.75www.a.shifen.com. 238 IN A 112.80.248.76;; Query time: 19 msec;; SERVER: 114.114.114.114#53(114.114.114.114);; WHEN: 一 7月 11 20:50:37 CST 2022;; MSG SIZE rcvd: 101 dns部署拓扑图 NAT网络地址转换 解决ip短缺问题，节省ipv4的地址 2的32次方 40亿个ipv4地址","path":"2023/10/20/10DHCP DNS NAT/","date":"10-20","excerpt":"","tags":[{"name":"linux基础知识","slug":"linux基础知识","permalink":"http://example.com/tags/linux%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"}]},{"title":"文件权限管理","text":"文件权限管理属主属组1234567891011121314chown (-R) 属主:属组 目录/文件 -R #递归 目录里面的所有内容都修改器属主属组-v #显示详细的处理信息[root@localhost cmatrix]# useradd user01[root@localhost cmatrix]# id user01uid=1004(user01) gid=1004(user01) 组=1004(user01)[root@localhost cmatrix]# touch test.txt[root@localhost cmatrix]# ll test.txt-rw-r--r--. 1 root root 0 12月 11 18:22 test.txt[root@localhost cmatrix]# chown user01:user01 test.txt[root@localhost cmatrix]# ll test.txt-rw-r--r--. 1 user01 user01 0 12月 11 18:22 test.txt#设置属主为root[root@localhost ~]# chown root anaconda-ks.cfg 文件权限 权限 目录 文件 r(4) 可以使用ls查看 可读 w(2) 可以创建或删除 可写 x(1) 可以cd进入 可执行 123456789101112基础用法[root@localhost cmatrix]# ll test.txt-rw-r--r--. 1 user01 user01 0 12月 11 18:22 test.txt[root@localhost cmatrix]# chmod 666 test.txt[root@localhost cmatrix]# ll test.txt-rw-rw-rw-. 1 user01 user01 0 12月 11 18:22 test.txt[root@localhost cmatrix]# chmod u+x test.txt[root@localhost cmatrix]# ll test.txt-rwxrw-rw-. 1 user01 user01 0 12月 11 18:22 test.txt[root@localhost cmatrix]# chmod o-w test.txt[root@localhost cmatrix]# ll test.txt-rwxrw-r--. 1 user01 user01 0 12月 11 18:22 test.txt 访问控制列表ACL传统的授予文件权限比如说其他用户授予权限是授予给其他中的所有用户权限，如果我想单独授予给某个用户权限，就有点力不从心了，这时候我们就引入了ACL访问控制列表权限了，文件访问控制列表可以单独设置某个用户或组对文件的管理权限 setfacl -m u:root:rwx test.txt 设置acl权限 getfacl test.txt 查看acl权限 setfacl -b test.txt 清空acl权限 实例1234567891011121314151617181920[root@localhost cmatrix]# useradd user02[root@localhost cmatrix]# setfacl -m u:user02:rwx test.txt[root@localhost cmatrix]# getfacl test.txt# file: test.txt# owner: user01# group: user01user::rwxuser:user02:rwxgroup::rw-mask::rwxother::r--[root@localhost cmatrix]# setfacl -b test.txt[root@localhost cmatrix]# getfacl test.txt# file: test.txt# owner: user01# group: user01user::rwxgroup::rw-other::r-- mask有效权限设置最大的ACL权限 12345678910setfacl -m m::rwx test.txt[root@localhost cmatrix]# setfacl -m m::rw test.txt[root@localhost cmatrix]# getfacl test.txt# file: test.txt# owner: user01# group: user01user::rwxgroup::rw-mask::rw-other::r-- 特殊权限suid仅能用于可执行权限 可以将权限借给他人 12345[root@localhost ~]# ll /usr/bin/passwd-rwsr-xr-x. 1 root root 27832 6月 10 2014 /usr/bin/passwd#其他用户没有写权限，但是可以用passwd，是因为有suid特殊权限chmod u+s test.txt sgid1chmod g+s test.txt 用于文件和目录 属组继承 sticky1chmod o+t test.txt 仅对于目录 目录仅能所属主修改删除 文件属性更改文件属性我们用到了chattr 1234[root@localhost ~]# chattr +i /etc/resolv.conf[root@localhost ~]# chattr +a /etc/resolv.conf[root@localhost ~]# lsattr /etc/resolv.conf----ia---------- /etc/resolv.conf 默认权限umask 12345678910111213141516171819202122[root@localhost ~]# umask0022# 可以看到我们的umask默认是022[root@localhost ~]# umask 033[root@localhost ~]# umask0033#也可以用umask进行临时更改#想要永久修改文件的umask 需要编辑配置文件进行修改[root@localhost ~]# vim /etc/profileumask 033[root@localhost ~]# source /etc/profile #生效文件#默认权限 目录是777 - umask = 777 - 022 = 755 = rwxr-xr-x 文件是 666 - 022 = 644 = rw-r--r--[root@localhost ~]# touch test1[root@localhost ~]# mkdir test11[root@localhost ~]# ll test1 test11-rw-r--r--. 1 root root 0 12月 11 18:40 test1[root@localhost ~]# ll -d test11drwxr--r--. 2 root root 6 12月 11 18:40 test11","path":"2023/10/20/03文件权限管理/","date":"10-20","excerpt":"","tags":[{"name":"linux基础知识","slug":"linux基础知识","permalink":"http://example.com/tags/linux%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"}]},{"title":"linux命令行","text":"shellshell英文翻译是壳，它是一个介于用户和系统内核之间起到翻译官作用的一个命令解释器，会把用户输入的命令翻译给内核然后去执行 常见的shell比如说bash 使用shell的两种方式 交互式 脚本 shell基础语法linux下一切皆文件 linux是单支文件系统 有一个systemd的父进程 其他进程都是他的子进程 systemd生命周期：不断地fork出子进程 systemd是一个pid为1的”大管家”,存在于”用户空间”,所有进程的父进程 ~ 家目录 cd 默认进入家目录 cd +目录的绝对地址或相对地址 localhost 主机名 修改主机名 hostnamectl set-hostname server1 然后使用bash进行刷新 cal日历 用法 123456789101112131415161718[root@localhost ~]# cal 十二月 2023日 一 二 三 四 五 六 1 2 3 4 5 6 7 8 910 11 12 13 14 15 1617 18 19 20 21 22 2324 25 26 27 28 29 3031[root@localhost ~]# cal -m #指定星期一为第一列 十二月 2023一 二 三 四 五 六 日 1 2 3 4 5 6 7 8 9 1011 12 13 14 15 16 1718 19 20 21 22 23 2425 26 27 28 29 30 31[root@localhost ~]# cal -m --year #显示一整年的日历 一些常用的Linux文件123456789101112131415161718192021222324252627282930# 域名解析文件[root@localhost ~]# cat /etc/resolv.conf# Generated by NetworkManagernameserver 114.114.114.114# 系统的主日志文件[root@localhost ~]# tail -5 /var/log/messagesDec 11 18:01:42 localhost dbus[709]: [system] Activating service name=&#x27;org.freedesktop.problems&#x27; (using servicehelper)Dec 11 18:01:42 localhost dbus[709]: [system] Successfully activated service &#x27;org.freedesktop.problems&#x27;Dec 11 18:01:42 localhost systemd: Started Session 38 of user root.Dec 11 18:01:42 localhost systemd-logind: New session 38 of user root.Dec 11 18:02:29 localhost systemd-logind: Removed session 16.#linux下的垃圾桶 黑洞 只进不出 是字符类型的设备[root@localhost ~]# ll -d /dev/nullcrw-rw-rw-. 1 root root 1, 3 12月 11 15:55 /dev/null# 开机默认执行的脚本文件[root@localhost ~]# cat /etc/rc.local#!/bin/bash# THIS FILE IS ADDED FOR COMPATIBILITY PURPOSES## It is highly advisable to create own systemd services or udev rules# to run scripts during boot instead of using this file.## In contrast to previous versions due to parallel execution during boot# this script will NOT be run after all other services.## Please note that you must run &#x27;chmod +x /etc/rc.d/rc.local&#x27; to ensure# that this script will be executed during boot.touch /var/lock/subsys/local 一些简单好玩的命令ping 123456789101112ping #检测网路连通性ping -c 4 指定ping 4次 linux默认不指定会一直ping下去[root@localhost ~]# ping -c 4 www.baidu.comPING www.a.shifen.com (180.101.50.242) 56(84) bytes of data.64 bytes from 180.101.50.242 (180.101.50.242): icmp_seq=1 ttl=128 time=12.7 ms64 bytes from 180.101.50.242 (180.101.50.242): icmp_seq=2 ttl=128 time=12.6 ms64 bytes from 180.101.50.242 (180.101.50.242): icmp_seq=3 ttl=128 time=12.4 ms64 bytes from 180.101.50.242 (180.101.50.242): icmp_seq=4 ttl=128 time=13.1 ms--- www.a.shifen.com ping statistics ---4 packets transmitted, 4 received, 0% packet loss, time 3004msrtt min/avg/max/mdev = 12.481/12.758/13.176/0.291 ms pstree 进程树状图 12[root@localhost ~]# yum install -y psmisc[root@localhost ~]# pstree -p #-p执行显示pid 进程号 sl linux下跑火车 123[root@localhost ~]# yum install -y epel-release # 安装epel扩展源[root@localhost ~]# yum install -y sl输入sl就可以跑起来了 cmatrix 1234567891011121314#首先第一步我们先来安装ncurses支持包yum install ncurses*#第二步我们再来下载代码雨的源码包wget https://jaist.dl.sourceforge.net/project/cmatrix/cmatrix/1.2a/cmatrix-1.2a.tar.gztar -zxvf cmatrix-1.2a.tar.gz#进入到源码包cd cmatrix-1.2a/#释放编译文件./configure --prefix=/opt/cmatrix/#编译且安装make &amp;&amp; make install#进入目录，执行代码雨cd /opt/cmatrix/./bin/cmatrix","path":"2023/09/20/02linux命令行/","date":"09-20","excerpt":"","tags":[{"name":"linux基础知识","slug":"linux基础知识","permalink":"http://example.com/tags/linux%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"}]}],"categories":[],"tags":[{"name":"test","slug":"test","permalink":"http://example.com/tags/test/"},{"name":"linux基础知识","slug":"linux基础知识","permalink":"http://example.com/tags/linux%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"}]}